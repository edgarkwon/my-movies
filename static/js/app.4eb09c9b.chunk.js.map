{"version":3,"sources":["webpack:///./utils.ts?8813","components/Poster.tsx","components/Slide.tsx","components/Votes.tsx","components/HMedia.tsx","api.ts","components/Loader.tsx","components/VMedia.tsx","components/HList.tsx","screens/Movies.tsx","screens/Search.tsx","screens/Tv.tsx","navigation/Tabs.tsx","colors.tsx","screens/Detail.tsx","navigation/Stack.tsx","navigation/Root.tsx","styled.tsx","App.js","assets/myface.jpg"],"names":["makeImgPath","img","width","Image","styled","Poster","path","source","uri","BgImg","Title","Text","props","isDark","theme","textColor","Wrapper","View","Column","Overview","Votes","Slide","backdrop_path","poster_path","original_title","vote_average","overview","fullData","useColorScheme","navigation","useNavigation","TouchableWithoutFeedback","onPress","navigate","screen","params","style","flex","StyleSheet","absoluteFill","tint","intensity","slice","votes","HMovie","HColumn","Release","HMedia","posterPath","originalTitle","releaseDate","voteAverage","TouchableOpacity","length","Date","toLocaleDateString","month","day","year","API_KEY","BASE_URL","moviesAPI","trending","fetch","then","res","json","upcoming","nowPlaying","search","queryKey","query","detail","id","tvAPI","airingToday","topRated","mainBgColor","Loader","ActivityIndicator","color","Container","VMedia","ListContainer","ListTitle","HListSeparator","HList","title","data","FlatList","horizontal","contentContainerStyle","paddingHorizontal","showsHorizontalScrollIndicator","ItemSeparatorComponent","keyExtractor","item","renderItem","original_name","ComingSoonTitle","HSeparator","SCREEN_HEIGHT","Dimensions","get","height","Movies","queryClient","useQueryClient","useQuery","nowPlayingLoading","isLoading","nowPlayingData","isRefetchingNowPlaying","isRefetching","upcomingLoading","upcomingData","isRefetchingUpcoming","trendingLoading","trendingData","isRefetchingTrending","refreshing","onRefresh","a","async","refetchQueries","ListHeaderComponent","loop","timeout","controlsEnabled","containerStyle","marginBottom","results","map","movie","release_date","ScrollView","SearchBar","TextInput","Search","useState","setQuery","enabled","moviesLoading","moviesData","searchMovies","refetch","tvLoading","tvData","searchTv","placeholder","returnKeyType","onChangeText","text","onSubmitEditing","Tv","todayLoading","todayData","todayRefetching","topLoading","topData","topRefetching","trendingRefetching","refreshControl","RefreshControl","paddingVertical","Tab","createBottomTabNavigator","Tabs","Navigator","sceneContainerStyle","backgroundColor","screenOptions","tabBarStyle","tabBarActiveTintColor","tabBarInactiveTintColor","headerStyle","headerTitleStyle","tabBarLabelStyle","marginTop","fontSize","fontWeight","Screen","name","component","options","tabBarIcon","size","Ionicons","Header","Background","Data","VideoBtn","BtnText","Detail","setOptions","goBack","route","isMovie","shareMedia","isAndroid","Platform","OS","homepage","imdb_id","Share","share","message","url","ShareButton","GoBackButton","useEffect","headerRight","headerLeft","LinearGradient","colors","videos","video","videoID","baseUrl","WebBrowser","openYTLink","key","NativeStack","createNativeStackNavigator","Stack","headerBackTitleVisible","Nav","Root","presentation","headerShown","lightTheme","darkTheme","QueryClient","App","useAssets","require","assets","Font","font","loaded","client","NavigationContainer","module","exports"],"mappings":"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","file":"static/js/app.4eb09c9b.chunk.js","sourcesContent":["export const makeImgPath = (img: string, width: string = \"w500\") =>\n  `https://image.tmdb.org/t/p/${width}${img}`;\n","import React from \"react\";\nimport styled from \"styled-components/native\";\nimport { makeImgPath } from \"../utils\";\n\ninterface PosterProps {\n  path: string;\n}\n\nconst Image = styled.Image`\n  width: 100px;\n  height: 160px;\n  border-radius: 5px;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nconst Poster: React.FC<PosterProps> = ({ path }) => (\n  <Image source={{ uri: makeImgPath(path) }} />\n);\n\nexport default Poster;\n","import React from \"react\";\nimport { TouchableWithoutFeedback, useColorScheme, View } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport { makeImgPath } from \"../utils\";\nimport { BlurView } from \"expo-blur\";\nimport { StyleSheet } from \"react-native\";\nimport Poster from \"./Poster\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst BgImg = styled.Image``;\n\nconst Title = styled.Text<{ isDark: boolean }>`\n  font-size: 16px;\n  font-weight: 800;\n  color: ${(props) => (props.isDark ? \"white\" : props.theme.textColor)};\n`;\n\nconst Wrapper = styled.View`\n  flex-direction: row;\n  height: 100%;\n  width: 90%;\n  margin: 0 auto;\n  justify-content: space-around;\n  align-items: center;\n`;\nconst Column = styled.View`\n  width: 60%;\n`;\n\nconst Overview = styled.Text<{ isDark: boolean }>`\n  margin-top: 10px;\n  color: ${(props) =>\n    props.isDark ? \"rgba(255, 255, 255, 0.8)\" : \"rgba(0, 0, 0, 0.8)\"};\n`;\n\nconst Votes = styled(Overview)`\n  font-size: 12px;\n`;\n\ninterface SlideProps {\n  backdrop_path: string;\n  poster_path: string;\n  original_title: string;\n  vote_average: number;\n  overview: string;\n  fullData: Movie;\n}\n\nconst Slide: React.FC<SlideProps> = ({\n  backdrop_path,\n  poster_path,\n  original_title,\n  vote_average,\n  overview,\n  fullData,\n}) => {\n  const isDark = useColorScheme() === \"dark\";\n  const navigation = useNavigation();\n  const goToDetail = () => {\n    navigation.navigate(\"Stack\", {\n      screen: \"Detail\",\n      params: { ...fullData },\n    });\n  };\n  return (\n    <TouchableWithoutFeedback onPress={goToDetail}>\n      <View style={{ flex: 1 }}>\n        <BgImg\n          style={StyleSheet.absoluteFill}\n          source={{ uri: makeImgPath(backdrop_path) }}\n        />\n        <BlurView\n          tint={isDark ? \"dark\" : \"light\"}\n          intensity={100}\n          style={StyleSheet.absoluteFill}\n        >\n          <Wrapper>\n            <Poster path={poster_path} />\n            <Column>\n              <Title>{original_title}</Title>\n              {vote_average > 0 ? <Votes>★{vote_average}/10</Votes> : null}\n              <Overview>{overview.slice(0, 90)}...</Overview>\n            </Column>\n          </Wrapper>\n        </BlurView>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nexport default Slide;\n","import React from \"react\";\nimport styled from \"styled-components/native\";\n\ninterface VotesProps {\n  votes: number;\n}\n\nconst Text = styled.Text`\n  color: rgba(0, 0, 0, 0.8);\n  font-size: 10px;\n`;\n\nconst Votes: React.FC<VotesProps> = ({ votes }) => (\n  <Text>{votes > 0 ? `⭐️ ${votes}/10` : `Coming soon`}</Text>\n);\nexport default Votes;\n","import { useNavigation } from \"@react-navigation/native\";\nimport React from \"react\";\nimport { TouchableOpacity } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport Poster from \"./Poster\";\nimport Votes from \"./Votes\";\n\nconst HMovie = styled.View`\n  padding: 0px 30px;\n  flex-direction: row;\n`;\n\nconst HColumn = styled.View`\n  margin-left: 15px;\n  width: 80%;\n`;\n\nconst Overview = styled.Text`\n  color: black;\n  opacity: 0.8;\n  width: 80%;\n`;\n\nconst Release = styled.Text`\n  color: black;\n  font-size: 12px;\n  margin-vertical: 10px;\n  font-weight: 500;\n  opacity: 0.6;\n`;\n\nconst Title = styled.Text`\n  color: black;\n  font-weight: 600;\n  margin-top: 7px;\n`;\n\ninterface HMediaProps {\n  posterPath: string;\n  originalTitle: string;\n  overview: string;\n  releaseDate?: string;\n  voteAverage?: number;\n}\n\nconst HMedia: React.FC<HMediaProps> = ({\n  posterPath,\n  originalTitle,\n  overview,\n  releaseDate,\n  voteAverage,\n  fullData,\n}) => {\n  const navigation = useNavigation();\n  const goToDetail = () => {\n    navigation.navigate(\"Stack\", {\n      screen: \"Detail\",\n      params: { ...fullData },\n    });\n  };\n  return (\n    <TouchableOpacity onPress={goToDetail}>\n      <HMovie>\n        <Poster path={posterPath} />\n        <HColumn>\n          <Title>\n            {originalTitle.length > 30\n              ? `${originalTitle.slice(0, 30)}...`\n              : originalTitle}\n          </Title>\n          {releaseDate ? (\n            <Release>\n              {new Date(releaseDate).toLocaleDateString(\"ko\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\",\n              })}\n            </Release>\n          ) : null}\n          {voteAverage ? <Votes votes={voteAverage} /> : null}\n          <Overview>\n            {overview !== \"\" && overview.length > 140\n              ? `${overview.slice(0, 140)}...`\n              : overview}\n          </Overview>\n        </HColumn>\n      </HMovie>\n    </TouchableOpacity>\n  );\n};\n\nexport default HMedia;\n","const API_KEY = \"6ef479367e400967798c0124a34eb03f\";\nconst BASE_URL = \"https://api.themoviedb.org/3\";\n\nexport interface Movie {\n  adult: boolean;\n  backdrop_path: string | null;\n  genre_ids: number[];\n  id: number;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string | null;\n  release_date: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\ninterface BaseResponse {\n  page: number;\n  total_results: number;\n  total_pages: number;\n}\n\nexport interface MovieResponse extends BaseResponse {\n  results: Movie[];\n}\n\nexport const moviesAPI = {\n  trending: () =>\n    fetch(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`).then((res) =>\n      res.json()\n    ),\n  upcoming: () =>\n    fetch(\n      `${BASE_URL}/movie/upcoming?api_key=${API_KEY}&language=en-US&page=1`\n    ).then((res) => res.json()),\n  nowPlaying: () =>\n    fetch(\n      `${BASE_URL}/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`\n    ).then((res) => res.json()),\n  search: ({ queryKey }) => {\n    const [_, query] = queryKey;\n    return fetch(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n    ).then((res) => res.json());\n  },\n  detail: ({ queryKey }) => {\n    const [_, id] = queryKey;\n    return fetch(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}&append_to_response=videos`\n    ).then((res) => res.json());\n  },\n};\n\nexport const tvAPI = {\n  trending: () =>\n    fetch(`${BASE_URL}/trending/tv/week?api_key=${API_KEY}`).then((res) =>\n      res.json()\n    ),\n  airingToday: () =>\n    fetch(`${BASE_URL}/tv/airing_today?api_key=${API_KEY}`).then((res) =>\n      res.json()\n    ),\n  topRated: () =>\n    fetch(`${BASE_URL}/tv/top_rated?api_key=${API_KEY}`).then((res) =>\n      res.json()\n    ),\n  search: ({ queryKey }) => {\n    const [_, query] = queryKey;\n    return fetch(\n      `${BASE_URL}/search/tv?api_key=${API_KEY}&language=en-US&page=1&query=${query}`\n    ).then((res) => res.json());\n  },\n  detail: ({ queryKey }) => {\n    const [_, id] = queryKey;\n    return fetch(\n      `${BASE_URL}/tv/${id}?api_key=${API_KEY}&append_to_response=videos`\n    ).then((res) => res.json());\n  },\n};\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\nimport styled from \"styled-components/native\";\n\nconst Wrapper = styled.View`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  background-color: ${(props) => props.theme.mainBgColor};\n`;\n\nconst Loader = () => (\n  <Wrapper>\n    <ActivityIndicator color=\"black\" />\n  </Wrapper>\n);\n\nexport default Loader;\n","import {\n  useNavigation,\n  useNavigationContainerRef,\n} from \"@react-navigation/native\";\nimport React from \"react\";\nimport { TouchableOpacity } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport Poster from \"./Poster\";\nimport Votes from \"./Votes\";\n\nconst Container = styled.View`\n  align-items: center;\n`;\n\nconst Title = styled.Text`\n  color: black;\n  font-weight: 600;\n  margin-top: 7px;\n  margin-bottom: 5px;\n`;\n\ninterface VMediaProps {\n  posterPath: string;\n  originalTitle: string;\n  voteAverage: number;\n}\n\nconst VMedia: React.FC<VMediaProps> = ({\n  posterPath,\n  originalTitle,\n  voteAverage,\n  fullData,\n}) => {\n  const navigation = useNavigation();\n  const goToDetail = () => {\n    //@ts-ignore\n    navigation.navigate(\"Stack\", {\n      screen: \"Detail\",\n      params: { ...fullData },\n    });\n  };\n  return (\n    <TouchableOpacity onPress={goToDetail}>\n      <Container>\n        <Poster path={posterPath} />\n        <Title>\n          {originalTitle.slice(0, 10)}\n          {originalTitle.length > 10 ? \"...\" : null}\n        </Title>\n        <Votes votes={voteAverage} />\n      </Container>\n    </TouchableOpacity>\n  );\n};\n\nexport default VMedia;\n","import React from \"react\";\nimport { FlatList } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport VMedia from \"./VMedia\";\n\nconst ListContainer = styled.View`\n  margin-bottom: 40px;\n`;\n\nconst ListTitle = styled.Text`\n  color: black;\n  font-size: 18px;\n  font-weight: 600;\n  margin-left: 30px;\n  margin-bottom: 20px;\n`;\n\nexport const HListSeparator = styled.View`\n  width: 20px;\n`;\n\ninterface HListProps {\n  title: string;\n  data: any[];\n}\n\nconst HList: React.FC<HListProps> = ({ title, data }) => (\n  <ListContainer>\n    <ListTitle>{title}</ListTitle>\n    <FlatList\n      horizontal\n      contentContainerStyle={{ paddingHorizontal: 30 }}\n      showsHorizontalScrollIndicator={false}\n      ItemSeparatorComponent={HListSeparator}\n      data={data}\n      keyExtractor={(item) => item.id + \"\"}\n      renderItem={({ item }) => (\n        <VMedia\n          posterPath={item.poster_path}\n          originalTitle={\n            item.original_title ? item.original_title : item.original_name\n          }\n          voteAverage={item.vote_average}\n          fullData={item}\n        />\n      )}\n    />\n  </ListContainer>\n);\n\nexport default HList;\n","import { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport React, { useEffect, useState } from \"react\";\nimport { Dimensions } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport Swiper from \"react-native-web-swiper\";\nimport Slide from \"../components/Slide\";\nimport HMedia from \"../components/HMedia\";\nimport { useQuery, useQueryClient } from \"react-query\";\nimport { MovieResponse, moviesAPI } from \"../api\";\nimport Loader from \"../components/Loader\";\nimport HList from \"../components/HList\";\n\nconst Container = styled.FlatList`\n  background-color: ${(props) => props.theme.mainBgColor};\n`;\n\nconst ListTitle = styled.Text`\n  color: black;\n  font-size: 18px;\n  font-weight: 600;\n  margin-left: 30px;\n`;\n\nconst ComingSoonTitle = styled(ListTitle)`\n  margin-bottom: 20px;\n`;\n\nconst HSeparator = styled.View`\n  height: 20px;\n`;\n\nconst { height: SCREEN_HEIGHT } = Dimensions.get(\"window\");\n\nconst Movies: React.FC<NativeStackScreenProps<any, \"Movies\">> = () => {\n  const queryClient = useQueryClient();\n  const {\n    isLoading: nowPlayingLoading,\n    data: nowPlayingData,\n    isRefetching: isRefetchingNowPlaying,\n  } = useQuery<MovieResponse>([\"movies\", \"nowPlaying\"], moviesAPI.nowPlaying);\n  const {\n    isLoading: upcomingLoading,\n    data: upcomingData,\n    isRefetching: isRefetchingUpcoming,\n  } = useQuery<MovieResponse>([\"movies\", \"upcoming\"], moviesAPI.upcoming);\n  const {\n    isLoading: trendingLoading,\n    data: trendingData,\n    isRefetching: isRefetchingTrending,\n  } = useQuery<MovieResponse>([\"movies\", \"trending\"], moviesAPI.trending);\n  const loading = nowPlayingLoading || upcomingLoading || trendingLoading;\n  const refreshing =\n    isRefetchingNowPlaying || isRefetchingUpcoming || isRefetchingTrending;\n  const onRefresh = async () => {\n    queryClient.refetchQueries([\"movies\"]);\n  };\n\n  const renderHMedia = ({ item }) => (\n    <HMedia\n      posterPath={item.poster_path}\n      originalTitle={item.original_title}\n      overview={item.overview}\n      releaseDate={item.release_date}\n      fullData={item}\n    />\n  );\n\n  const movieKeyExtractor = (item) => item.id + \"\";\n\n  return loading ? (\n    <Loader />\n  ) : upcomingData ? (\n    <Container\n      onRefresh={onRefresh}\n      refreshing={refreshing}\n      ListHeaderComponent={\n        <>\n          <Swiper\n            horizontal\n            loop\n            timeout={3.5}\n            controlsEnabled={false}\n            containerStyle={{\n              marginBottom: 30,\n              width: \"100%\",\n              height: SCREEN_HEIGHT / 4,\n            }}\n          >\n            {nowPlayingData?.results.map((movie) => (\n              <Slide\n                key={movie.id}\n                backdrop_path={movie.backdrop_path || \"\"}\n                poster_path={movie.poster_path || \"\"}\n                original_title={movie.original_title}\n                vote_average={movie.vote_average}\n                overview={movie.overview}\n                fullData={movie}\n              />\n            ))}\n          </Swiper>\n          <HList title=\"Trending Movies\" data={trendingData.results} />\n          <ComingSoonTitle>Coming Soon</ComingSoonTitle>\n        </>\n      }\n      keyExtractor={movieKeyExtractor}\n      data={upcomingData.results}\n      ItemSeparatorComponent={HSeparator}\n      renderItem={renderHMedia}\n    ></Container>\n  ) : null;\n};\n\nexport default Movies;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport styled from \"styled-components/native\";\nimport { moviesAPI, tvAPI } from \"../api\";\nimport HList from \"../components/HList\";\nimport Loader from \"../components/Loader\";\n\nconst Container = styled.ScrollView`\n  background-color: ${(props) => props.theme.mainBgColor};\n`;\n\nconst SearchBar = styled.TextInput`\n  background-color: rgba(0, 0, 0, 0.1);\n  padding: 10px 15px;\n  border-radius: 15px;\n  width: 90%;\n  margin: 10px auto;\n  margin-bottom: 40px;\n`;\n\nconst Search = () => {\n  const [query, setQuery] = useState(\"\");\n  const {\n    isLoading: moviesLoading,\n    data: moviesData,\n    refetch: searchMovies,\n  } = useQuery([\"searchMovies\", query], moviesAPI.search, { enabled: false });\n  const onChangeText = (text: string) => {\n    setQuery(text);\n  };\n  const {\n    isLoading: tvLoading,\n    data: tvData,\n    refetch: searchTv,\n  } = useQuery([\"searchTv\", query], tvAPI.search, { enabled: false });\n  const onSubmit = () => {\n    if (query === \"\") {\n      return;\n    }\n    searchMovies();\n    searchTv();\n  };\n  return (\n    <Container>\n      <SearchBar\n        placeholder=\"Search for Movie of TV show\"\n        returnKeyType=\"search\"\n        onChangeText={onChangeText}\n        onSubmitEditing={onSubmit}\n      />\n      {moviesLoading || tvLoading ? <Loader /> : null}\n      {moviesData ? (\n        <HList title=\"Movie Results\" data={moviesData.results} />\n      ) : null}\n      {tvData ? <HList title=\"Tv Results\" data={tvData.results} /> : null}\n    </Container>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport { View, Text, ScrollView, FlatList, RefreshControl } from \"react-native\";\nimport { QueryClient, useQuery, useQueryClient } from \"react-query\";\nimport styled from \"styled-components/native\";\nimport { tvAPI } from \"../api\";\nimport HList, { HListSeparator } from \"../components/HList\";\nimport Loader from \"../components/Loader\";\nimport VMedia from \"../components/VMedia\";\n\nconst Container = styled.ScrollView`\n  background-color: ${(props) => props.theme.mainBgColor};\n`;\n\nconst Tv = () => {\n  const queryClient = useQueryClient();\n  const {\n    isLoading: todayLoading,\n    data: todayData,\n    isRefetching: todayRefetching,\n  } = useQuery([\"tv\", \"today\"], tvAPI.airingToday);\n  const {\n    isLoading: topLoading,\n    data: topData,\n    isRefetching: topRefetching,\n  } = useQuery([\"tv\", \"top\"], tvAPI.topRated);\n  const {\n    isLoading: trendingLoading,\n    data: trendingData,\n    isRefetching: trendingRefetching,\n  } = useQuery([\"tv\", \"trending\"], tvAPI.trending);\n  const loading = todayLoading || topLoading || trendingLoading;\n  const refreshing = todayRefetching || topRefetching || trendingRefetching;\n  const onRefresh = () => {\n    queryClient.refetchQueries([\"tv\"]);\n  };\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <Container\n      refreshControl={\n        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n      }\n      contentContainerStyle={{ paddingVertical: 30 }}\n    >\n      <HList title=\"Trending TV\" data={trendingData.results} />\n      <HList title=\"Airing Today\" data={todayData.results} />\n      <HList title=\"Top Rated TV\" data={topData.results} />\n    </Container>\n  );\n};\n\nexport default Tv;\n","import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport Movies from \"../screens/Movies\";\nimport Search from \"../screens/Search\";\nimport Tv from \"../screens/Tv\";\nimport { useColorScheme } from \"react-native\";\nimport { BLACK_COLOR, DARK_GREY, LIGHT_GREY, YELLOW_COLOR } from \"../colors\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nconst Tab = createBottomTabNavigator();\n\nconst Tabs = () => {\n  return (\n    <Tab.Navigator\n      sceneContainerStyle={{ backgroundColor: \"white\" }}\n      screenOptions={{\n        tabBarStyle: { backgroundColor: \"white\" },\n        tabBarActiveTintColor: BLACK_COLOR,\n        tabBarInactiveTintColor: LIGHT_GREY,\n        headerStyle: { backgroundColor: \"white\" },\n        headerTitleStyle: { color: BLACK_COLOR },\n        tabBarLabelStyle: { marginTop: -5, fontSize: 12, fontWeight: \"600\" },\n      }}\n    >\n      <Tab.Screen\n        name=\"Movies\"\n        component={Movies}\n        options={{\n          tabBarIcon: ({ color, size }) => {\n            return <Ionicons name=\"film-outline\" size={size} color={color} />;\n          },\n        }}\n      />\n      <Tab.Screen\n        name=\"Tv\"\n        component={Tv}\n        options={{\n          tabBarIcon: ({ color, size }) => {\n            return <Ionicons name=\"tv-outline\" size={size} color={color} />;\n          },\n        }}\n      />\n      <Tab.Screen\n        name=\"Search\"\n        component={Search}\n        options={{\n          tabBarIcon: ({ color, size }) => {\n            return <Ionicons name=\"search-outline\" size={size} color={color} />;\n          },\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nexport default Tabs;\n","export const YELLOW_COLOR = \"#ffa801\";\nexport const BLACK_COLOR = \"#1e272e\";\nexport const DARK_GREY = \"#d2dae2\";\nexport const LIGHT_GREY = \"#808e9b\";\n","import React, { useEffect } from \"react\";\nimport {\n  Dimensions,\n  StyleSheet,\n  Linking,\n  TouchableOpacity,\n  Share,\n  Platform,\n  Text,\n} from \"react-native\";\nimport styled from \"styled-components/native\";\nimport Poster from \"../components/Poster\";\nimport { makeImgPath } from \"../utils\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { useQuery } from \"react-query\";\nimport { moviesAPI, tvAPI } from \"../api\";\nimport Loader from \"../components/Loader\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as WebBrowser from \"expo-web-browser\";\n\nconst { height: SCREEN_HEIGHT } = Dimensions.get(\"window\");\n\nconst Container = styled.ScrollView`\n  background-color: ${(props) => props.theme.mainBgColor};\n`;\n\nconst Header = styled.View`\n  height: ${SCREEN_HEIGHT / 4}px;\n  justify-content: flex-end;\n  padding: 0px 20px;\n`;\nconst Background = styled.Image``;\n\nconst Column = styled.View`\n  flex-direction: row;\n  width: 80%;\n`;\n\nconst Title = styled.Text`\n  color: black;\n  font-size: 36px;\n  align-self: flex-end;\n  width: 80%;\n  margin-left: 15px;\n  font-weight: 500;\n`;\n\nconst Data = styled.View`\n  padding: 0px 20px;\n`;\n\nconst Overview = styled.Text`\n  color: ${(props) => props.theme.textColor};\n  margin: 20px 0px;\n`;\n\nconst VideoBtn = styled.TouchableOpacity`\n  flex-direction: row;\n`;\nconst BtnText = styled.Text`\n  color: black;\n  font-weight: 600;\n  margin-bottom: 10px;\n  line-height: 24px;\n  margin-left: 10px;\n`;\n\nconst Detail = ({ navigation: { setOptions, goBack }, route: { params } }) => {\n  const isMovie = \"original_title\" in params;\n  const shareMedia = async () => {\n    const isAndroid = Platform.OS === \"android\";\n    const homepage = isMovie\n      ? `https://www.imdb.com/title/${data.imdb_id}/`\n      : data.homepage;\n    if (isAndroid) {\n      await Share.share({\n        message: `${params.overview}\\nCheck it out: ${homepage}`,\n        title: isMovie ? params.original_title : params.original_name,\n      });\n    } else {\n      await Share.share({\n        url: homepage,\n        title: isMovie ? params.original_title : params.original_name,\n      });\n    }\n  };\n  const ShareButton = () => (\n    <TouchableOpacity onPress={shareMedia}>\n      <Ionicons name=\"share-outline\" size={24} />\n    </TouchableOpacity>\n  );\n  const GoBackButton = () => (\n    <TouchableOpacity onPress={goBack}>\n      <Ionicons name=\"arrow-back\" size={24} />\n    </TouchableOpacity>\n  );\n  const { isLoading, data } = useQuery(\n    [isMovie ? \"movies\" : \"tv\", params.id],\n    isMovie ? moviesAPI.detail : tvAPI.detail\n  );\n  useEffect(() => {\n    setOptions({\n      title: isMovie ? \"Movie\" : \"TV Show\",\n    });\n  }, []);\n  useEffect(() => {\n    if (data) {\n      setOptions({\n        headerRight: () => <ShareButton />,\n      });\n    }\n  }, [data]);\n  if (Platform.OS === \"web\") {\n    useEffect(() => {\n      setOptions({\n        headerLeft: () => <GoBackButton />,\n      });\n    }, []);\n  }\n  const openYTLink = async (videoID) => {\n    const baseUrl = `http://m.youtube.com/watch?v=${videoID}`;\n    //await Linking.openURL(baseUrl);\n    await WebBrowser.openBrowserAsync(baseUrl);\n  };\n  return (\n    <Container>\n      <Header>\n        <Background\n          style={StyleSheet.absoluteFill}\n          source={{ uri: makeImgPath(params.backdrop_path || \"\") }}\n        />\n        <LinearGradient\n          colors={[\"transparent\", \"white\"]}\n          style={StyleSheet.absoluteFill}\n        />\n        <Column>\n          <Poster path={params.poster_path || \"\"} />\n          <Title>\n            {isMovie ? params.original_title : params.original_name}\n          </Title>\n        </Column>\n      </Header>\n      <Data>\n        <Overview>{params.overview}</Overview>\n        {isLoading ? <Loader /> : null}\n        {data?.videos?.results?.map((video) => (\n          <VideoBtn key={video.key} onPress={() => openYTLink(video.key)}>\n            <Ionicons name=\"logo-youtube\" size={24} />\n            <BtnText>{video.name}</BtnText>\n          </VideoBtn>\n        ))}\n      </Data>\n    </Container>\n  );\n};\nexport default Detail;\n","import React from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Detail from \"../screens/Detail\";\n\nconst NativeStack = createNativeStackNavigator();\n\nconst Stack = () => (\n  <NativeStack.Navigator screenOptions={{ headerBackTitleVisible: false }}>\n    <NativeStack.Screen name=\"Detail\" component={Detail} />\n  </NativeStack.Navigator>\n);\n\nexport default Stack;\n","import React from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Tabs from \"./Tabs\";\nimport Stack from \"./Stack\";\n\nconst Nav = createNativeStackNavigator();\n\nconst Root = () => (\n  <Nav.Navigator screenOptions={{ presentation: \"modal\", headerShown: false }}>\n    <Nav.Screen name=\"Tabs\" component={Tabs} />\n    <Nav.Screen name=\"Stack\" component={Stack} />\n  </Nav.Navigator>\n);\n\nexport default Root;\n","export const lightTheme = {\n  mainBgColor: \"white\",\n  textColor: \"#1e272e\",\n};\nexport const darkTheme = {\n  mainBgColor: \"#1e272e\",\n  textColor: \"#d2dae2\",\n};\n","import React from \"react\";\nimport AppLoading from \"expo-app-loading\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as Font from \"expo-font\";\nimport { useAssets } from \"expo-asset\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Root from \"./navigation/Root\";\nimport { useColorScheme } from \"react-native\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme, lightTheme } from \"./styled\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  const isDark = useColorScheme() === \"dark\";\n  const [assets] = useAssets([require(\"./assets/myface.jpg\")]);\n  const [loaded] = Font.useFonts(Ionicons.font);\n  if (!assets || !loaded) {\n    return <AppLoading />;\n  }\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <NavigationContainer>\n          <Root />\n        </NavigationContainer>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/myface.89c5e14a.jpg\";"],"sourceRoot":""}